// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entity "service-xyz/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IConsumerUsecase is an autogenerated mock type for the IConsumerUsecase type
type IConsumerUsecase struct {
	mock.Mock
}

// CreateConsumer provides a mock function with given fields: data
func (_m *IConsumerUsecase) CreateConsumer(data *entity.ConsumerInfoRequest) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.ConsumerInfoRequest) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDataConsumerById provides a mock function with given fields: id
func (_m *IConsumerUsecase) GetDataConsumerById(id int) (*entity.ConsumerInfo, error) {
	ret := _m.Called(id)

	var r0 *entity.ConsumerInfo
	if rf, ok := ret.Get(0).(func(int) *entity.ConsumerInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ConsumerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIConsumerUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIConsumerUsecase creates a new instance of IConsumerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIConsumerUsecase(t mockConstructorTestingTNewIConsumerUsecase) *IConsumerUsecase {
	mock := &IConsumerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
